//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: SpyroDefs_Common
//   Authors: Symbiosis/Thal
//	 Note: Based on what I could find in the SWV docs.
//   Purpose: Most of the Spyro 1 specific stuff... 
//------------------------------------------------
#include "SpyroDefs_Common.bt"
// Keep in mind that the Japanese version may be different here
// 80 bytes
#define SUBLEVEL_DIR_COUNT_1_US 10
#define SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_1 64

// 272 bytes
#define SUBLEVEL_DIR_COUNT_1_EU 34


#define DIR_MAYBEMOBY_COUNT_1_US 34
// TODO - Which WAD hash is this for?
// #define DIR_MAYBEMOBY_COUNT_1_EU 40 

/* 8-bit RGB */
typedef struct rgbi {
	unsigned byte r;
	unsigned byte g;
	unsigned byte b; 
	unsigned byte i;
} RGBI <optimize=true, size=4, read=Str("RGB: %d, %d, %d | unk: %d", this.r, this.g, this.b, this.i)>;

// Model Coordinate format... used in... S1TerrainModel
// Honestly this is probably same as what is listed
// In the sky but in case of terrain is unused, just speculation
typedef struct modelcoordinates {
	uint16 y;
	uint16 x;
	uint16 unk;
	uint16 z;
} ModelCoordinate<optimize=true, read=Str("XYZ: %d, %d, %d | unk: %d", this.x, this.y, this.z, this.unk)>;

// Ah yes. BigCoordinates. Some 32 bit coordinates are stored in the Portal structures.
typedef struct bigcoords {
	uint32 x;
	uint32 y;
	uint32 z;
} BigCoordinates<optimize=true, read=Str("XYZ (TODO ORDER): %d, %d, %d", this.x, this.y, this.z)>;

// Believe this is mainly used in the Sky structure.
typedef struct spyroidx {
	uint32 unk : 2;
	uint32 first : 10;
	uint32 second : 10;
	uint32 third : 10;
} SpyroIndex<read=Str("%d, %d, %d - %d", this.first, this.second, this.third, this.unk)>;

/* Terrain vertex/color/poly format defs */
// This is definitely used in the Sky structure.
typedef struct s1vertex {
	uint32 x : 11;
	uint32 y : 11;
	uint32 z : 10;
} S1Vertex<read=Str("XYZ: %d, %d, %d", this.x, this.y, this.z)>;

// A couple helpers to tidy up the file tree - otherwise
// it would be a really long scroll.
typedef struct s1vertexlist(uint16 vertex_count) {
	local uint16 i = 0;
	for(i = 0; i < vertex_count; ++i) S1Vertex vert;
} S1VertexList;
typedef struct s1colorlist(uint16 color_count) {
	local uint16 i = 0;
	for(i = 0; i < color_count; ++i) RGBI color;
} S1ColorList;

// Terrain header contains two separate blocks of this
typedef struct s1modelsectorinfo {
	unsigned byte vert_count;
	unsigned byte color_count;
	unsigned byte poly_count;
	unsigned byte unk;
} S1ModelSectorInfo<optimize=true, read=Str("VCP: %d, %d, %d | unk: %d", this.vert_count, this.color_count, this.poly_count, this.unk)>;

// Not sure if this is right at all, based on SWV doc.
// Would also prefer to find better names than "LOD" and "MID"
typedef union s1lodpolyflags {
	unsigned byte depth : 5;
	unsigned byte transparent : 1;
	unsigned byte blend_type : 2;
} S1LodPolyFlags;

// LOD poly. Whatever this is.
typedef struct s1lodpoly {
	unsigned byte unk;
	unsigned byte vertices[3]<read=Str("V: %d, %d, %d", this[0], this[1], this[2])>;
	S1LodPolyFlags renderflags<read=Str("[?] - Depth: %d | Transparent: %d | Blending: %d", this.depth, this.transparent, this.blend_type)>;
	unsigned byte colors[3];
} S1LodPoly<read=Str("V: %d, %d, %d | C: %d, %d, %d | F: %d, %d, %d | unk: %d",
		this.vertices[0], this.vertices[1], this.vertices[2],
		this.colors[0], this.colors[1], this.colors[2], this.renderflags.depth, this.renderflags.transparent, this.renderflags.blend_type,
		this.unk)>;
		
// 'Mid' poly. Whatever this is too. Ground quads?
// See SWV ground doc, this may be completely wrong.
typedef struct S1MidPoly {
	unsigned byte vertices[4];
	unsigned byte colors[4];
	byte texture_index; // 7 bit value, apparently
	byte rotation; // ?
	byte depth_1[2];
	byte flags; // inverse, both-sides...
	byte depth_2[3];
} S1MidPoly;


/* Terrain  */
typedef struct s1terrainsector {
	typedef struct S1LodPolyList(uint16 poly_count) {
		local uint16 i = 0;
		for(i = 0; i < poly_count; ++i) S1LodPoly poly;
	} S1LodPolyList;

	// Rotation? Or more something to do with camera angles?
	// I literally have no idea.
	uint64 UNK_rotation;
	ModelCoordinate pos;
	S1ModelSectorInfo lod_info;
	S1ModelSectorInfo mid_info;
	
	uint32 dummy; // MUST be 0xFFFFFFFF
	if(0xFFFFFFFF != dummy){
		Printf("Error parsing the terrain sector header.\r\n");
		Exit(1);
	}
	
	// Lists for the "LOD" and "MID" sections.
	// Not really sure how you render these.
	S1VertexList v_lod(lod_info.vert_count);
	S1ColorList c_lod(lod_info.color_count);
	S1LodPolyList p_lod(lod_info.poly_count);

	S1VertexList v_mid(mid_info.vert_count);
	S1ColorList c_mid(mid_info.color_count);
	S1ColorList c_far(mid_info.color_count);
	
	S1MidPoly mid_polys[mid_info.poly_count];
} S1TerrainSector<read=Str("XYZ: %d, %d, %d | LOD VCP: %d, %d, %d, unk: %d | MID VCP: %d, %d, %d, unk: %d",
	this.pos.x, this.pos.y, this.pos.z,
	this.lod_info.vert_count, this.lod_info.color_count, this.lod_info.poly_count, this.lod_info.unk,
	this.mid_info.vert_count, this.mid_info.color_count, this.mid_info.poly_count, this.mid_info.unk)>;

typedef struct s1terrainmodel {
	local int64 base = FTell();
	local unsigned int i = 0;
	uint32 size;
	uint32 sector_count;
	uint32 sector_offsets[sector_count];
	for(i = 0; i < sector_count; ++i){
		// The offsets listed in header don't take into account
		// the dummy "size" nor the 'extra' bytes.
		FSeek(base + sector_offsets[i] + sizeof(size));
		S1TerrainSector sector;
	}
} S1TerrainModel<read=Str("Sector Count: %d", this.sector_count)>;

/* Texture */
// Notice, this may be completely incorrect also.
// This is also based on what I could parse from the SWV doc
// But I cannot verify.
typedef struct s1texturetile {
	uint64 tex_x : 8;
	uint64 tex_y : 8;

	uint64 palette_1_y: 2;
	uint64 unk_palette : 1;
	uint64 palette_1_x : 5;

	uint64 palette_2 : 8;
	uint64 vert_x : 8;
	uint64 vert_y : 8;
	
	uint64 sector_bpp_8 : 1; // If this and last bit aren't specified, we are 4bpp
	uint64 unk_sector1 : 2;
	uint64 sector_y : 1;
	uint64 unk_sector2 : 1;
	uint64 sector_x : 3;

	uint64 tex_width_is_32 : 1;
	uint64 rotation_type : 2; // - 1-7
	uint64 unk_flags_zero : 3; // ????????
	uint64 is_15_bpp : 1;
} S1TextureTile<size=8, read=Str("Tex XY: %d, %d | Pal XY: %d, %d | BPP 15: %d", this.tex_x, this.tex_y, this.palette_1_x, this.palette_1_y, this.is_15_bpp)>;


typedef struct S1TexDist {
	S1TextureTile far;
	S1TextureTile mid;
} S1TexDist;

// S1 definition for the file coordinate breakdown.
// As in SWV doc, apparently S1 splits textures into sixteenths
typedef struct s1texcorner {
	typedef struct s1texturetilelist(byte count) {
		local byte i = 0;
		for(i = 0; i < count; ++i) S1TextureTile tile;
	} S1TextureTileList;
	S1TextureTileList texture(1);
	S1TextureTileList quarter(4);
	S1TextureTileList segments(16);
} S1TexCorner;

typedef struct s1texcomp {
	S1TexDist dist;
	S1TexCorner texture;
} S1TexComp;

typedef struct s1texcoords {
	uint32 size;
	uint32 tile_count;
	typedef struct s1texcoordslist(uint32 tile_count) {
		local uint32 i = 0;
		for(i = 0; i < tile_count; ++i) S1TexComp tex;
	} S1TexCoordsList;
	S1TexCoordsList textures(tile_count);
} S1TexCoords<read=Str("Tile Count: %d", this.tile_count)>;

/* S1 Sky */
typedef struct s1skypoly {
	SpyroIndex vertex;
	SpyroIndex color;
} S1SkyPoly<read=Str("VertIndex: %d, %d, %d, unk: %d | ClrIndex: %d, %d, %d, unk %d", this.vertex.first, this.vertex.second, this.vertex.third, this.vertex.unused, this.color.first, this.color.second, this.color.third, this.color.unused)>;


typedef struct s1skysector {
	uint32 unk[2];
	uint16 y;
	uint16 z;
	uint16 vertex_count;
	uint16 x;
	uint16 poly_count;
	uint16 color_count;
	
	uint32 sync; // MUST be 0xFFFFFFFF
	if(0xFFFFFFFF != sync){
	 	Printf("Error parsing the sky sector header.\r\n");
	 	Exit(1);
	}
	
	S1VertexList vertices(vertex_count);
	S1ColorList colors(color_count);
	S1SkyPoly polys[poly_count];
} S1SkySector<read=Str("XYZ: %d, %d, %d | VCP: %d, %d, %d", this.x, this.y, this.z, this.vertex_count, this.color_count, this.poly_count)>;

typedef struct s1sky {
	local int k = 0;
	local int64 base = FTell();
	uint32 size;
	if(0 != size) {
		RGBI background;
		uint32 sector_count;
		uint32 sector_offsets[sector_count];
		for(k = 0; k < sector_count; ++k) {
			FSeek(base + sector_offsets[k] + sizeof(uint32));
			S1SkySector sector;
		}
		FSeek(base + size);
	}
} S1Sky<read=(exists(this.sector_count) ? Str("Sector Count: %d, Background: %d, %d, %d, unk: %d", this.sector_count, this.background.r, this.background.g, this.background.b, this.background.i) : Str("N/A"))>;



/* S1 Other Shit */
// Needs verification like everything else ... but pain
typedef struct s1portalobject {
	typedef struct s1bigcoordslist(uint32 count) {
		local uint32 i = 0;
		for(i = 0; i < count; ++i) BigCoordinates coord;
	} S1BigCoordsList;
	uint32 dummy;
	uint32 vertex_count;
	uint32 header[6];
	S1BigCoordsList coordinates(vertex_count);
	uint32 _RUNTIME_Sector_Count_Portal;
	uint32 zeroes[4];
	// uint32 zeroes[5]; // 1st: sector render count, 2nd: ptr??? to something
} S1PortalObject<read=Str("Vertex Count: %d", this.vertex_count)>;


typedef struct s1portals {
	local uint32 i = 0;
	uint32 count;
	for(i = 0; i < count; ++i) {
		S1PortalObject obj;
		S1Sky sky;
	}
} S1Portals<read=((count == 0) ? Str("N/A") : Str("%d Portals", this.count))>; // TODO: Parameterize if 010 adds feature

// No idea, just know the overall size.
typedef struct s1sounddescriptor {
	uint32 data[5];
} S1SoundDescriptor<read=Str("%d, %d, %d, %d, %d", this.data[0], this.data[1], this.data[2], this.data[3], this.data[4])>;

typedef struct s1soundtable {
	local int i = 0;
	uint32 size;
	if(0 != size) {
		uint32 unk_header[64];
		typedef struct SoundDescriptorList {
			uint32 count;
			for(i = 0; i < count; ++i) {
				S1SoundDescriptor sound;
			}
		} SoundDescriptorList;
		SoundDescriptorList elements;
	}
} S1SoundTable<read=Str("Sound Count: %d", (exists(this.elements.count)) ? this.elements.count : 0)>;

// Same. No idea what this 12 byte structure is.
typedef struct s1particledescriptor {
	uint32 data[3];
} S1ParticleDescriptor<read=Str("%d, %d, %d", this.data[0], this.data[1], this.data[2])>;

// Just know it has a list of them, apparently
typedef struct s1particledesc {
	local int i = 0;
	uint32 count;
	if(0 != count) {
		for(i = 0; i < count; ++i) {
			S1ParticleDescriptor desc;
		}
	}
} S1ParticleTable<read=Str("Particle Count: %d", (exists(this.count)) ? this.count: 0)>;

// This is the entire 2nd file of a level.
typedef struct s1sublevelmodeldata(uint32 size_comp) {
	local uint32 total_size = 0;
	S1TexCoords texcoords<read=Str("Tile Count: %d", this.tile_count)>; 
	S1TerrainModel terrain<read=Str("Sector Count: %d", this.sector_count)>;

	// Do not know these structures
	uint32 optimization_land_size;
	if(0 != optimization_land_size) Blob optimization_land(optimization_land_size - sizeof(uint32));
	uint32 surface_props_size;
	if(0 != surface_props_size) Blob surface_props(surface_props_size - sizeof(uint32));
	uint32 collision_model_size;
	if(0 != collision_model_size) Blob collision_model(collision_model_size - sizeof(uint32));

	S1Sky sky;
	S1Portals portals;
	
	// TODO - US WAD Gnasty's World is index 34 in US FULL
	uint32 particle_descriptor_size;
	S1ParticleTable particle_table;
	S1SoundTable sound_table;

	total_size += 16; // the "size" variables we havent moved yet
	
	total_size += sizeof(texcoords);
	total_size += sizeof(terrain);
	total_size += optimization_land_size;
	total_size += surface_props_size;
	total_size += collision_model_size;
	total_size += sizeof(sky);
	total_size += sizeof(portals);
	total_size += particle_descriptor_size;
	total_size += sizeof(sound_table);

	// TODO - Somehow, the padding is off a bit, need to fix.
	// local uint32 padding_size = header.file[i].size - total_size;
	// Printf("%d - %d = %d\r\n", header.file[i].size, total_size, padding_size);
	// byte zeropad[padding_size]; // FSkip(padding_size); //
} S1SublevelModelData<read=Str("Texture Count: %d, Terrain Sector Count: %d, Sky Sector Count: %d, Portals: %d, Sound Count: %d",
	this.texcoords.tile_count,
	this.terrain.sector_count,
	(exists(this.sky.sector_count) ? this.sky.sector_count : 0),
	(exists(this.portals.count) ? this.portals.count : 0),
	(exists(this.sound_table.elements.count) ? this.sound_table.elements.count : 0)
)>;


/* S1 Dragon Models */
typedef struct s1dragonheader {
	uint32 dummy;
	FileEntry sound;
	FileEntry dragon_model;
	FileEntry dragon_model_next;
	FileEntry camera_coordinates;
	uint32 unk[3];
} S1DragonHeader;

typedef struct s1dragon {
	long base = FTell();
	S1DragonHeader header;
	// TODO: Are the offsets relative or absolute?
	// header.sound.offset += base;
	// header.dragon_model += base;
	// header.dragon_model_next += base;
	// header.camera_coordinates += base;
	FSeek(base);
} S1Dragon;