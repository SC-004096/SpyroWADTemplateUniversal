//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: SpyroWAD
//   Authors: Symbiosis - Thal
//   Version: 0
//   Purpose: Universal template for the WADs of all three classic games (hopefully, including weird versions)
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: Because we finally need some "documentation" for this file format.
//------------------------------------------------
#define DIR_HEADER_SIZE 2048
#define DIR_MAGIC 2048
#define ROOT_DIR_COUNT 256
// Keep in mind that the Japanese version may be different here
// 80 bytes
#define SUBLEVEL_DIR_COUNT_1_US 10
#define SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_1 64
#define SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_1 64

// 272 bytes
#define SUBLEVEL_DIR_COUNT_1_EU 34

#define SUBLEVEL_DIR_COUNT_2_US 8
#define SUBLEVEL_DIR_COUNT_3_US 20


#define DIR_MAYBEMOBY_COUNT_1_US_DEMO 34 // the 6962kb one
#define DIR_MAYBEMOBY_COUNT_1_US DIR_MAYBEMOBY_COUNT_1_US_DEMO
// #define DIR_MAYBEMOBY_COUNT_1_EU 40 // Which one is this for?
// Where is s2
#define DIR_MAYBEMOBY_COUNT_3_US 32

#define TEXTURE_DATA_NORMAL_SIZE 524288
#define SUBLEVEL_MOBY_COUNT 64

// I don't really know what these are right now
// These need actual structs kek
#define MODEL_CHUNK_COUNT_STRUCT_1_S2 6
#define MODEL_CHUNK_COUNT_STRUCT_2_S2 12
#define MODEL_CHUNK_SIZE_STRUCT_1_S2 12
#define MODEL_CHUNK_SIZE_STRUCT_2_S2 32

#define MODEL_CHUNK_COUNT_STRUCT_1_S3 4
#define MODEL_CHUNK_COUNT_STRUCT_2_S3 11
#define MODEL_CHUNK_SIZE_STRUCT_1_S3 MODEL_CHUNK_SIZE_STRUCT_1_S2
#define MODEL_CHUNK_SIZE_STRUCT_2_S3 MODEL_CHUNK_SIZE_STRUCT_2_S2

#define MODEL_CHUNK_COUNT_LEVEL_S1 12
#define MODEL_CHUNK_COUNT_SUBLEVEL_S1 8
#define MODEL_CHUNK_COUNT_CREDIT_S1 3

// I'm still not sure why I have these in my code
#define JUMP_AT_SKY 5
#define JUMPS_TIL_AFTER_SKY_1_US (JUMP_AT_SKY + 1) // 6
#define MODEL_CHUNK_AFTER_SKY JUMPS_TIL_AFTER_SKY_1_US
#define MODEL_FILE_CHUNK_ID_TWO_AFTER_SKY_S3 (JUMPS_TIL_AFTER_SKY_1_US + 2) // 8

// What the fuck are these supposed to be
#define S1_HOMEWORLD_EXTRA_SKY_STRUCT_BASE_SIZE 52
#define S1_HOMEWORLD_EXTRA_SKY_STRUCT_POINT_SIZE 12

#define HEADER_ERROR_CODE 0xFFFFFFFF
#define SUBDIR_COUNT 20


enum GameType {
	GAME_SPYRO_1_US,
	GAME_SPYRO_1 = GAME_SPYRO_1_US,
	GAME_SPYRO_1_EU,
	GAME_SPYRO_1_JP, // Same as EU?
	GAME_SPYRO_2,
	GAME_SPYRO_3
};

enum DirectoryType {
	DIRECTORY_ROOT,
	DIRECTORY_SUBLEVEL
};
typedef struct jmp {
	uint32 offset;
} Jump<read=Str("Offset [%d]", this.offset)>;
typedef struct blobby (uint64 size){
	local uint64 arrsize = size;
	byte data[size];
} Blob; // <read=Str("(%d)", this.arrsize)>
typedef struct file_entry {
    uint32 offset <format=decimal>; 
    uint32 size <format=decimal>;
	local uint isDirectory;
} FileEntry <size=8, read=Str("%s [%d, %d]", (this.isDirectory) ? "Directory" : "File", this.offset, this.size)>;



struct DirectoryListing;
int handle_spyro1_sublevel(DirectoryListing &header);
int handle_spyro2_sublevel(DirectoryListing &header);
int handle_spyro3_sublevel(DirectoryListing &header);
int populate_file_entries(uint64 total_possible_dir_count, uint &found_count, uint &file_count, uint &dir_count, uint64 &header_base);
int populate_header_something(DirectoryListing &header, uint &found);
struct DirectoryFiles;

typedef struct Dir (GameType game, DirectoryType dirtype) {
	local GameType type = game;
	local DirectoryType dirtype = dirtype;
	local uint32 dir_max = 0;
	local uint32 jumplist_max = 0;
	switch(type) {
		case GAME_SPYRO_1_US: {
			dir_max = (dirtype != DIRECTORY_SUBLEVEL) ? ROOT_DIR_COUNT : SUBLEVEL_DIR_COUNT_1_US;
			jumplist_max = SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_1;
		} break;
		case GAME_SPYRO_1_EU: {
			dir_max = (dirtype != DIRECTORY_SUBLEVEL) ? ROOT_DIR_COUNT : SUBLEVEL_DIR_COUNT_1_EU;
			jumplist_max = SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_1;
		} break;
		case GAME_SPYRO_1_JP: {
			dir_max = (dirtype != DIRECTORY_SUBLEVEL) ? ROOT_DIR_COUNT : SUBLEVEL_DIR_COUNT_1_EU;
		} break;
		case GAME_SPYRO_2: {
			dir_max = (dirtype != DIRECTORY_SUBLEVEL) ? ROOT_DIR_COUNT : SUBLEVEL_DIR_COUNT_2_US;
			jumplist_max = SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_1;
		} break;
		case GAME_SPYRO_3: {
			dir_max = (dirtype != DIRECTORY_SUBLEVEL) ? ROOT_DIR_COUNT : SUBLEVEL_DIR_COUNT_3_US;
			jumplist_max = SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_1;// SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_3;
		} break;
	}
	if(!dir_max) {
		Printf("Unknown or invalid game type - dir_max not set!\r\n.");
		Exit(1);
	}
	// if(dirtype == DIRECTORY_SUBLEVEL) Printf("%d\r\n", parentof(parentof(this)).header.found);
	DirectoryListing header(dir_max); // <open=true>
	DirectoryFiles files(header); //<open=true>;
	
} Directory<open=true, read=Str("Max Directory Count: %d", dir_max)>; // 

typedef struct DirHeaderList (uint32 max_directories) {
	local uint64 base = FTell(); // DO NOT REMOVE, used in DirectoryFiles, sublevel_ functions
	local uint found = 0, files = 0, directories = 0;
	local uint jumplist_found = 0;
	local uint something_found = 0;

	// This is common to all games
	if(HEADER_ERROR_CODE == populate_file_entries(max_directories, found, files, directories, base) || !found) {
		Printf("There was an error populating file entries.\r\n");
		Exit(1);
	}
	if(parentof(header).dirtype != DIRECTORY_ROOT) {
		jumplist_found = populate_header_jumplist(this, jumplist_found);
		if(HEADER_ERROR_CODE == jumplist_found) {
			 Printf("There was an error populating the jump list\r\n");
			 Exit(1);
		}
		if(HEADER_ERROR_CODE == populate_header_something(this, something_found)){
			Printf("There was an error populating the \"SOMETHING\" list\r\n");
			Exit(1);
		}
		if(!jumplist_found && !something_found){

		}


	}	


	
	// switch(parentof(this).type){
	// 	case GAME_SPYRO_1_US: case GAME_SPYRO_1_EU: case GAME_SPYRO_1_JP: { handle_spyro1_sublevel(this); } break;
	// 	case GAME_SPYRO_2: { handle_spyro2_sublevel(this); } break;
	// 	case GAME_SPYRO_3: { handle_spyro3_sublevel(this); } break;
	// }

	
	// This, however, is not
	// handle_spyro1_sublevel(this);
	Printf("%u found, %d files, %d directories @ %d - Jumplist %d | Something %d\r\n", found, files, directories, base, this.jumplist_found, this.something_found);
} DirectoryListing<read=Str("%d Files, %d Directories @ %d | Jumplist %d | Something %d", this.files, this.directories, this.base, this.jumplist_found, this.something_found/*, this.jumplist_found*/)>; // , %d Jumps @ Head

typedef struct DirectoryFiles(DirectoryListing &header) {
	// Helpers for some disgusting offset stuffs
	local uint32 entries_maxsize = parentof(header).dir_max * sizeof(FileEntry);
	local uint32 jumplist_maxsize = parentof(header).jumplist_max * sizeof(Jump);
	local uint64 coffs = header.base + entries_maxsize + jumplist_maxsize;

	local int i = 0;
	local int64 seek_offset = 0;
	for(i = 0; i < header.found; ++i){
		seek_offset = header.file[i].offset + header.base;
		// Printf("Seek to (%d + %d) = %d\r\n", header.file[i].offset, header.base, seek_offset);
		FSeek(seek_offset);
		if(header.file[i].isDirectory){
			// The previous file entry was some sort of pointer list for the sublevel - for non credits
			// if(i > 0) Printf("Previous file: %d, %d - Current I: %d\n", header.file[i - 1].offset, header.file[i - 1].size, i);
			Directory sublevel(parentof(header).type, DIRECTORY_SUBLEVEL);	
		} else {
			if(parentof(header).dirtype != DIRECTORY_ROOT){
				switch(parentof(header).type){
					case GAME_SPYRO_1_US: case GAME_SPYRO_1_EU: case GAME_SPYRO_1_JP: {
						handle_spyro1_sublevel(header);
					} break;
					// TODO - Basically all WAD stuff
					case GAME_SPYRO_2: { handle_spyro2_sublevel(header); } break;
					case GAME_SPYRO_3: { handle_spyro3_sublevel(header); } break;
					default: { 
						Blob file(header.file[i].size);
						// FSkip(header.file[i].size);
					} break;
					// case GAME_SPYRO_2: {} break;
					// case GAME_SPYRO_3: {} break;
				};
				// We are a directory not root
				// FSkip(header.file[i].size);
			} else {
				// FSkip(header.file[i].size);
				Blob file(header.file[i].size);
				
			}


			// Blob file(header.file[i].size);
			// FSkip(header.file[i].size);
		}
	}
} DirectoryFiles;

// Need to know the EXACT spyro 1 type
int handle_spyro1_sublevel(DirectoryListing &header){


	if(!header.file[i].size) {
		local int next_file = i + 1;
		// TODO - This deals with credits files where the first file's size
		// Seems to  be set to 0. But I want to be able to deal with
		// If all consecutives are set to zero as well.

		// TODO - Credit files mapping and also be able to count
		// how many playable sublevels there are / unplayable credits levels
		// and other misc levels (such as cutscenes, main menu levels)

		if(next_file < header.found) {
			Printf("%d, %d | %d\n", i, next_file, header.found);
			Printf("%d - %d | %d\n", header.file[i + 1].offset, header.file[i + 1].size, header.file[i + 1].offset - header.file[i].size);
		}// Check offset of next if available
		// local int next_file = i + 1;
		// Make sure we don't go out of bounds
		// if(next_file < header.found){
			// if(header[next_file].offset != header[i].offset) {
				// Printf("%d\n", header[i + 1].offset - header[i].size);
				// header.file[i].size = header[next_file].offset - 
			// }
		// }
	}
	if(header.file[i].size) {
		Blob file(header.file[i].size);
	}
	return 0;
}
int handle_spyro2_sublevel(DirectoryListing &header){ return 0; }
int handle_spyro3_sublevel(DirectoryListing &header){
	local uint32 entries_maxsize = parentof(header).dir_max * sizeof(FileEntry);
	local uint32 jumplist_maxsize = parentof(header).jumplist_max * sizeof(Jump);
	local uint64 coffs = header.base + entries_maxsize + jumplist_maxsize;
	if(parentof(header).dirtype != DIRECTORY_ROOT) {
		
	}
	return 0;
}

int populate_header_something(DirectoryListing &header, uint &found){
	// local uint32 t = header.base;
	local int i = 0;
	local uint32 something_found = 0;
	local uint32 current = 0;
	
	for(i = 0; i < 408; ++i){
		current = ReadUInt();
		if(current != 0) {
			Jump thing<bgcolor=cBlue>;
			++found;
		}
		

	}

	return 0;
}

uint32 populate_header_jumplist(DirectoryListing &header, uint &found){
	// local uint32 header_size = header.file[0].offset;
	// local uint32 base = FTell(); // offset of the jump list
	// local uint32 header_dirsize = max_directories * sizeof(FileEntry);
	local int i = 0;
	local uint32 jumplist_found = 0;
	local uint64 fsize = FileSize();
	local uint32 jumplist_size = parentof(header).jumplist_max * sizeof(uint32);
	
	local uint32 jumplist_max = jumplist_size / sizeof(uint32);
	local uint32 current = 0;
	local uint32 next = 0;
	// local uint64 base = FTell();
	
	if(!jumplist_size || jumplist_size < sizeof(uint32)) {
		Printf("Jumplist size invalid (did you forget to add to Dir switch?): %d\r\n", jumplist_size);
		return HEADER_ERROR_CODE;
	}
	// Printf("%d, %d\r\n", jumplist_size, jumplist_max);
	// Printf("%d - %d = %d (%d)\r\n", header_size, header_dirsize, (jumplist_size - header_dirsize), jumplist_max);
	for(i = 0; i < jumplist_max; ++i){
		// TODO - DRY
		// Read the first jump, and the next, then position back
		current = ReadUInt();
		FSkip(sizeof(uint32));
		next = ReadUInt();
		if(current > fsize) {
			Printf("There was an error parsing the header jump list? (%d > %d)\r\n", current, fsize);
			Exit(1);
		}
		// If next is greater than the fsize we probably reached the end of the header
		if(next > fsize) {
			// Printf("Next offset %d is greater than filesize %d - (%d of %d)\r\n", next, fsize, i + 1, jumplist_max);
			return jumplist_found;
		}
		
		// If current is 0, or they are equivalent, or both are 0, next
		if(!current || current == next || !current && !next) continue;
	
		FSkip(-sizeof(current));
		// Back at current, add to jump list
		Jump jumpyboi<bgcolor=cRed>;
		++jumplist_found;
	}
	found = jumplist_found;
	return jumplist_found;
}

int populate_file_entries(uint64 total_possible_dir_count, uint &found_count, uint &file_count, uint &dir_count, uint64 &header_base){
	local int i = 0;
	local int64 fsize = FileSize();
	local int offset = 0;
	local uint size = 0;
	local int next_offset = 0;
	local int64 base = FTell();
	local int64 seekback = 0;
	local uint32 is_dir = 0;
	local int64 offsize = 0;
	local uint64 file_entry_offs = 0;
	for(i = 0; i < total_possible_dir_count; ++i){ // total_possible_dir_count
		file_entry_offs =  FTell();
		// TODO - DRY this
		offset = ReadUInt();
		FSkip(sizeof(uint32));
		size = ReadUInt();
		FSkip(sizeof(uint32));
		next_offset = ReadUInt();
		FSkip(-sizeof(FileEntry));
		// Printf("[%u, %u - %u]\r\n", offset, size, next_offset);
		// If we are both 0, skip. If an offset exists but no size, and the next offset is the same, skip to it

		if(!offset && !size
			|| (offset && !size
			// If the next offset is equal to the offset of
			// the current file then we can just skip this file
			// and move on to the next iteration.
			&& next_offset == offset) // Can really be && or ||, doesn't matter? TODO
			|| offset == fsize // Happens in some Spyro 3 Files (Crash Bash & Spyro ex)
			|| (offset + size) > fsize
		) {  // Could be a problem... may wanna errmsg here 
			FSkip(sizeof(FileEntry));
			continue;
		}
		// Otherwise, we must calculate the size of this file
		// Based on the offset of the next one. If the size
		// is 0 or less (somehow, gross) we just skip this file. 
		if(offset && !size && next_offset != offset) size = next_offset - offset; // For credits files
		
		if(!size) {
			FSkip(sizeof(FileEntry));
			continue;
		}

		// Obviously if the data goes past EOF or something like that should not happen
		offsize = offset + size;
		if(offsize > fsize){
			Printf("Error with file parse. File at %u Offset %u Size %u (%u) greater than filesize %u, %u bytes over EOF.\r\n", found_count + 1, offset, size, offsize, fsize, fsize - offsize);
			return 0xFFFFFFFF;
		}

		// Read the offset/size pair from file
		FileEntry file<bgcolor=cGreen>; // <bgcolor=cBlue>
		++found_count;
		// Check if the given file entry is a directory or not
		// And then seek back to the original position
		seekback = FTell();
		FSeek(header_base + offset);
		is_dir = ReadUInt();
		if(is_dir == DIR_MAGIC) {
			file.isDirectory = 1;
			++dir_count;
		} else {
			++file_count;
		}
		FSeek(seekback);
	}
	
	// Note: We do not have to seek back to base here because of how BTs work
	return found_count;
}


Directory root(GAME_SPYRO_1, DIRECTORY_ROOT);