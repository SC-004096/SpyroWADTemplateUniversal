//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: SpyroDefs_Common
//   Authors: Symbiosis/Thal
//------------------------------------------------
#include "SpyroDefs_S1.bt"

enum GameType {
	GAME_SPYRO_1_US,
	GAME_SPYRO_1 = GAME_SPYRO_1_US,
	GAME_SPYRO_1_EU,
	GAME_SPYRO_1_JP, // Same as EU?
	GAME_SPYRO_2,
	GAME_SPYRO_3
};

enum DirectoryType {
	DIRECTORY_ROOT,
	DIRECTORY_SUBLEVEL
};


#define SUBLEVEL_DIR_COUNT_2_US 8
#define SUBLEVEL_DIR_COUNT_3_US 20
#define DIR_MAYBEMOBY_COUNT_3_US 32
#define SUBDIR_COUNT 20

// Some pre-definitions
struct DirectoryListing;
int handle_spyro1_sublevel(DirectoryListing &header);
int handle_spyro2_sublevel(DirectoryListing &header);
int handle_spyro3_sublevel(DirectoryListing &header);
// Janky function pulled from my old C code - it handles the offset/size -> file headers
int populate_file_entries(uint64 total_possible_dir_count, uint &found_count, uint &file_count, uint &dir_count, uint64 &header_base);
// Don't know what 'something' is, its in the header of a sublevel though.
int populate_header_something(DirectoryListing &header, uint &found);
struct DirectoryFiles;


typedef struct Dir (GameType game, DirectoryType dirtype) {
	local GameType type = game;
	local DirectoryType dirtype = dirtype;
	local uint32 dir_max = 0;
	local uint32 jumplist_max = 0;
	switch(type) {
		case GAME_SPYRO_1_US: {
			dir_max = (dirtype != DIRECTORY_SUBLEVEL) ? ROOT_DIR_COUNT : SUBLEVEL_DIR_COUNT_1_US;
			jumplist_max = SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_1;
		} break;
		case GAME_SPYRO_1_EU: {
			dir_max = (dirtype != DIRECTORY_SUBLEVEL) ? ROOT_DIR_COUNT : SUBLEVEL_DIR_COUNT_1_EU;
			jumplist_max = SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_1;
		} break;
		case GAME_SPYRO_1_JP: {
			dir_max = (dirtype != DIRECTORY_SUBLEVEL) ? ROOT_DIR_COUNT : SUBLEVEL_DIR_COUNT_1_EU;
		} break;
		
		// TODO - Uhhh... why are these all the same?????? I think I tried messing with it at some point
		case GAME_SPYRO_2: {
			dir_max = (dirtype != DIRECTORY_SUBLEVEL) ? ROOT_DIR_COUNT : SUBLEVEL_DIR_COUNT_2_US;
			jumplist_max = SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_1;
		} break;
		case GAME_SPYRO_3: {
			dir_max = (dirtype != DIRECTORY_SUBLEVEL) ? ROOT_DIR_COUNT : SUBLEVEL_DIR_COUNT_3_US;
			jumplist_max = SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_1; // SUBLEVEL_DIR_HEADER_JUMPLIST_COUNT_3;
		} break;
	}
	if(!dir_max) {
		Printf("Unknown or invalid game type - dir_max not set!\r\n.");
		Exit(1);
	}
	// if(dirtype == DIRECTORY_SUBLEVEL) Printf("%d\r\n", parentof(parentof(this)).header.found);
	DirectoryListing header(dir_max); // <open=true>
	DirectoryFiles files(header); //<open=true>;
} Directory<open=false, read=DirectoryGetPortals(this)>;

string DirectoryGetPortals(Directory &d) {
	return (exists(d.files.level_models.portals.count) && (d.files.level_models.portals.count > 0)) ?
		Str("%d Portals", d.files.level_models.portals.count) :
		Str("");
}

// The actual header with entries and sometimes the moby jump list, and other stuff.
typedef struct DirHeaderList (uint32 max_directories) {
	local uint64 base = FTell(); // DO NOT REMOVE, used in DirectoryFiles, sublevel_ functions
	local uint found = 0, files = 0, directories = 0;
	local uint jumplist_found = 0;
	local uint something_found = 0;

	// This is common to all games
	if(HEADER_ERROR_CODE == populate_file_entries(max_directories, found, files, directories, base) || !found) {
		Printf("There was an error populating file entries.\r\n");
		Exit(1);
	}
	if(parentof(header).dirtype != DIRECTORY_ROOT) {
		jumplist_found = populate_header_jumplist(this, jumplist_found);
		if(HEADER_ERROR_CODE == jumplist_found) {
			 Printf("There was an error populating the jump list\r\n");
			 Exit(1);
		}
		if(HEADER_ERROR_CODE == populate_header_something(this, something_found)){
			Printf("There was an error populating the \"SOMETHING\" list\r\n");
			Exit(1);
		}
		// if(!jumplist_found && !something_found){}
	}	
} DirectoryListing<read=Str("%d Files, %d Directories @ %d | Jumplist %d | Something %d", this.files, this.directories, this.base, this.jumplist_found, this.something_found)>;


typedef struct DirectoryFiles(DirectoryListing &header) {
	// Helpers for some disgusting offset stuffs
	local uint32 entries_maxsize = parentof(header).dir_max * sizeof(FileEntry);
	local uint32 jumplist_maxsize = parentof(header).jumplist_max * sizeof(Jump);
	local uint64 coffs = header.base + entries_maxsize + jumplist_maxsize;

	local int i = 0;
	local int64 seek_offset = 0;
	for(i = 0; i < header.found; ++i){
		seek_offset = header.file[i].offset + header.base;
		FSeek(seek_offset);
		if(header.file[i].isDirectory){
			// The previous file entry was some sort of pointer list for the sublevel - for non credits
			// if(i > 0) Printf("Previous file: %d, %d - Current I: %d\n", header.file[i - 1].offset, header.file[i - 1].size, i);
			Directory sublevel(parentof(header).type, DIRECTORY_SUBLEVEL);	
		} else {
			if(parentof(header).dirtype != DIRECTORY_ROOT){
				switch(parentof(header).type){
					case GAME_SPYRO_1_US: case GAME_SPYRO_1_EU: case GAME_SPYRO_1_JP: {
						handle_spyro1_sublevel(header);
					} break;
					case GAME_SPYRO_2: { handle_spyro2_sublevel(header); } break;
					case GAME_SPYRO_3: { handle_spyro3_sublevel(header); } break;
					default: { 
						Blob file(header.file[i].size);
					} break;
				};
			} else {
				Blob file(header.file[i].size);
			}
		}
	}
} DirectoryFiles;

int handle_spyro1_sublevel(DirectoryListing &header){
	local int64 real_size = 0;
	local int next_file = i + 1;
	local int is_credits_file = 0;

	// This is a credits file check.
	// First file in a credits file always has
	// size set to '0', so you have to guess
	// based off of the next file's offset.
	if(header.file[i].size) {
		real_size = header.file[i].size;
	} else if (next_file < header.found) {
		real_size = header.file[i + 1].offset - header.file[i].size;
		is_credits_file = 1;
	}
	if(0 == real_size) {
		Printf("Something went wrong and we couldn't find a real size of a file.\r\n");
		return 0;
	}

	// Handle file based on array index
	// First 0-4 files are types of data, everything else after those are dragon models
	switch(i) {
		case 0: {
			// If we are credits, texture slots are 393216 (512*512*1.5) and remaining is sound
			// otherwise, 524288 (512x512x2) and remaining is sound
			// by deduction, sublevels use 8 bits per pixel 
			local int texture_size = (true == is_credits_file) ? 393216 : 524288;
			local int sound_size = (true == is_credits_file) ? 0 : real_size - texture_size;
			Blob vram(texture_size);
			
			if(0 != sound_size) {
				local int sample_count = sound_size / sizeof(SPUAPCDM);
				local int sample_size = (sample_count * sizeof(SPUAPCDM));
				if(sound_size != sample_size){
					Printf("Sound Size %d != Sample Size %d", sound_size, sample_size);
					return 0;
				}
				SPUAPCDM samples[sample_count];
			}
		} break;
		case 1: {
			S1SublevelModelData level_models(real_size);
		} break;
		case 2: {
			local uint32 j = 0;
			local uint64 base = startof(header);
			if(header.jumplist_found) {
				if(exists(header.file[2]) && exists(header.jumpyboi[0]) && (header.file[2].offset < header.jumpyboi[0].offset)) {
					Printf("[Warning]: Moby file at %d, sublevel %d is less than the first jump offset (%d).",
						header.file[2].offset, i, header.jumpyboi[0].offset
					); 
				}
				// for(j = 0; j < header.jumplist_found; ++j) {
				// 	Printf("%d\r\n", header.jumpyboi[j].offset);
				// }
				/// FSeek(base);
				/// FSkip(real_size);
			} else {
				Blob mobys(real_size);
			}
		} break;
		case 3: {
			Blob dyndata(real_size);
		} break;
		default: {
			Blob dragon(real_size);
		} break; 
	}
	return 0;
}



int handle_spyro2_sublevel(DirectoryListing &header){ return 0; }
int handle_spyro3_sublevel(DirectoryListing &header){ return 0; }

// All I know, is this is in S1 sublevel headers
int populate_header_something(DirectoryListing &header, uint &found){
	local int i = 0;
	local uint32 something_found = 0;
	local uint32 current = 0;
	
	for(i = 0; i < 408; ++i){
		current = ReadUInt();
		if(current != 0) {
			Jump thing<bgcolor=cBlue>;
			++found;
		}
	}
	return 0;
}

// This is the list of files in a sublevel, I know for sure Spyro 1, not sure about 2/3 - 
// Where these seem to point to offsets in one of the sublevel files.
// Possibly offsets to the moby models?
uint32 populate_header_jumplist(DirectoryListing &header, uint &found){
	local int i = 0;
	local uint32 jumplist_found = 0;
	local uint64 fsize = FileSize();
	local uint32 jumplist_size = parentof(header).jumplist_max * sizeof(uint32);
	
	local uint32 jumplist_max = jumplist_size / sizeof(uint32);
	local uint32 current = 0;
	local uint32 next = 0;
	
	if(!jumplist_size || jumplist_size < sizeof(uint32)) {
		Printf("Jumplist size invalid (did you forget to add to Dir switch?): %d\r\n", jumplist_size);
		return HEADER_ERROR_CODE;
	}

	for(i = 0; i < jumplist_max; ++i){
		// Read the first jump, and the next, then position back
		current = ReadUInt();
		FSkip(sizeof(uint32));
		next = ReadUInt();
		if(current > fsize) {
			Printf("There was an error parsing the header jump list? (%d > %d)\r\n", current, fsize);
			Exit(1);
		}
		
		// If next is greater than the fsize we probably reached the end of the header
		if(next > fsize) {
			// Printf("Next offset %d is greater than filesize %d - (%d of %d)\r\n", next, fsize, i + 1, jumplist_max);
			return jumplist_found;
		}
		
		// If current is 0, or they are equivalent, or both are 0, next
		if(!current || current == next || !current && !next) continue;
	
		FSkip(-sizeof(current));
		// Back at current, add to jump list
		Jump jumpyboi<bgcolor=cRed>;
		++jumplist_found;
	}
	found = jumplist_found;
	return jumplist_found;
}


int populate_file_entries(uint64 total_possible_dir_count, uint &found_count, uint &file_count, uint &dir_count, uint64 &header_base){
	local int i = 0;
	local int64 fsize = FileSize();
	local int offset = 0;
	local uint size = 0;
	local int next_offset = 0;
	local int64 base = FTell();
	local int64 seekback = 0;
	local uint32 is_dir = 0;
	local int64 offsize = 0;
	local uint64 file_entry_offs = 0;
	for(i = 0; i < total_possible_dir_count; ++i){
		file_entry_offs =  FTell();
		offset = ReadUInt();
		FSkip(sizeof(uint32));
		size = ReadUInt();
		FSkip(sizeof(uint32));
		next_offset = ReadUInt();
		FSkip(-sizeof(FileEntry));
		// Printf("[%u, %u - %u]\r\n", offset, size, next_offset);
		// If we are both 0, skip. If an offset exists but no size, and the next offset is the same, skip to it
		if(!offset && !size
			|| (offset && !size
			// If the next offset is equal to the offset of
			// the current file then we can just skip this file
			// and move on to the next iteration.
			&& next_offset == offset) // Can really be && or ||, doesn't matter? TODO
			|| offset == fsize // Happens in some Spyro 3 Files (Crash Bash & Spyro ex)
			|| (offset + size) > fsize
		) {  // Could be a problem... may wanna errmsg here 
			FSkip(sizeof(FileEntry));
			continue;
		}
		// Otherwise, we must calculate the size of this file
		// Based on the offset of the next one. If the size
		// is 0 or less (somehow, gross) we just skip this file. 
		if(offset && !size && next_offset != offset) size = next_offset - offset; // For credits files
		
		if(!size) {
			FSkip(sizeof(FileEntry));
			continue;
		}

		// Obviously if the data goes past EOF or something like that should not happen
		offsize = offset + size;
		if(offsize > fsize){
			Printf("Error with file parse. File at %u Offset %u Size %u (%u) greater than filesize %u, %u bytes over EOF.\r\n", found_count + 1, offset, size, offsize, fsize, fsize - offsize);
			return 0xFFFFFFFF;
		}

		// Read the offset/size pair from file
		FileEntry file<bgcolor=cGreen>; // <bgcolor=cBlue>
		++found_count;
		
		// Check if the given file entry is a directory or not
		// And then seek back to the original position
		seekback = FTell();
		FSeek(header_base + offset);
		is_dir = ReadUInt();
		if(is_dir == DIR_MAGIC) {
			file.isDirectory = 1;
			++dir_count;
		} else {
			++file_count;
		}
		FSeek(seekback);
	}
	
	// Note: We do not have to seek back to base here because of how BTs work, thanks
	return found_count;
}




